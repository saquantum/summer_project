# 后端 Spring Boot Dockerfile 示例
# 请将此文件放在 backend 目录下

FROM openjdk:17-jdk-slim AS build

WORKDIR /app

# 复制 Maven/Gradle 文件
COPY pom.xml .
# 如果使用 Gradle，取消注释下面的行
# COPY build.gradle gradle.properties gradlew ./
# COPY gradle ./gradle

# 下载依赖 (利用 Docker 缓存)
RUN apt-get update && apt-get install -y maven
RUN mvn dependency:go-offline -B

# 复制源代码
COPY src ./src

# 构建应用
RUN mvn clean package -DskipTests

# 运行阶段
FROM openjdk:17-jre-slim

WORKDIR /app

# 创建非 root 用户
RUN groupadd -r spring && useradd -r -g spring spring

# 复制构建的 JAR 文件
COPY --from=build /app/target/*.jar app.jar

# 创建上传目录
RUN mkdir -p /app/uploads && \
    mkdir -p /app/logs && \
    chown -R spring:spring /app

# 切换到非 root 用户
USER spring

# 暴露端口
EXPOSE 8080

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8080/actuator/health || exit 1

# 启动应用
ENTRYPOINT ["java", \
    "-Djava.security.egd=file:/dev/./urandom", \
    "-Dspring.profiles.active=${SPRING_PROFILES_ACTIVE:-prod}", \
    "-jar", \
    "app.jar"]
