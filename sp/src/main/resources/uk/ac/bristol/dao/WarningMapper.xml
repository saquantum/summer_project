<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="uk.ac.bristol.dao.WarningMapper">
    <sql id="selectWarnings">
        select warning_id,
               warning_weather_type,
               warning_level,
               warning_head_line,
               warning_valid_from,
               warning_valid_to,
               warning_impact,
               warning_likelihood,
               warning_affected_areas,
               warning_what_to_expect,
               warning_further_details,
               warning_update_description,
               ST_AsGeoJSON(warning_area) as warning_area
        from weather_warnings
    </sql>

    <select id="selectWarnings" resultMap="ResultMaps.WarningMap">
        <include refid="selectWarnings"/>
        where now() between warning_valid_from and warning_valid_to
        <include refid="QueryBlocks.combinedFiltering"/>
        <include refid="QueryBlocks.orderAndPage"/>
    </select>

    <select id="selectWarningAnchor" resultType="java.util.Map">
        <include refid="selectWarnings"/>
        where now() between warning_valid_from and warning_valid_to
        and warning_id &gt;= #{rowId}
        order by warning_id asc
        limit 1 offset 0
    </select>
    
    <select id="selectWarningsIncludingOutdated" resultMap="ResultMaps.WarningMap">
        <include refid="selectWarnings"/>
        <include refid="QueryBlocks.filtering"/>
        <include refid="QueryBlocks.orderAndPage"/>
    </select>

    <select id="selectWarningsIncludingOutdatedAnchor" resultType="java.util.Map">
        <include refid="selectWarnings"/>
        where warning_id &gt;= #{rowId}
        order by warning_id asc
        limit 1 offset 0
    </select>

    <select id="selectWarningById" resultMap="ResultMaps.WarningMap">
        select warning_id,
               warning_weather_type,
               warning_level,
               warning_head_line,
               warning_valid_from,
               warning_valid_to,
               warning_impact,
               warning_likelihood,
               warning_affected_areas,
               warning_what_to_expect,
               warning_further_details,
               warning_update_description,
               ST_AsGeoJSON(warning_area) as warning_area
        from weather_warnings
        where warning_id = #{id}
    </select>

    <select id="selectWarningsIntersectingWithGivenAsset" resultMap="ResultMaps.WarningMap">
        select warning_id,
               warning_weather_type,
               warning_level,
               warning_head_line,
               warning_valid_from,
               warning_valid_to,
               warning_impact,
               warning_likelihood,
               warning_affected_areas,
               warning_what_to_expect,
               warning_further_details,
               warning_update_description,
               ST_AsGeoJSON(warning_area) as warning_area
        from weather_warnings
                 join assets
                      on ST_Intersects(asset_location, warning_area) and
                         now() between warning_valid_from and warning_valid_to
        where asset_id = #{assetId};
    </select>

    <select id="testWarningExistence" resultType="java.lang.Boolean">
        select count(*) > 0
        from weather_warnings
        where warning_id = #{id};
    </select>

    <select id="testWarningDetailDiff" resultType="java.lang.Boolean">
        select case
                   when
                       warning_weather_type != #{weatherType}
                   or warning_level != #{warningLevel}
            or warning_head_line != #{warningHeadLine}
            or warning_valid_from != #{validFrom}
            or warning_valid_to != #{validTo}
            or warning_impact != #{warningImpact}
            or warning_likelihood != #{warningLikelihood}
            or warning_affected_areas != #{affectedAreas}
            or warning_what_to_expect != #{whatToExpect}
            or warning_further_details != #{warningFurtherDetails}
            then true
            else false
        end
        from weather_warnings
        where warning_id =
        #{id}
    </select>

    <select id="testWarningAreaDiff" resultType="java.lang.Boolean">
        select case
                   when
                       not ST_Equals(warning_area, ST_Multi(ST_GeomFromGeoJSON(#{areaAsJson})))
                       then true
                   else false
                   end
        from weather_warnings
        where warning_id = #{id}
    </select>

    <insert id="insertWarning">
        insert into weather_warnings (warning_id,
                                      warning_weather_type,
                                      warning_level,
                                      warning_head_line,
                                      warning_valid_from,
                                      warning_valid_to,
                                      warning_impact,
                                      warning_likelihood,
                                      warning_affected_areas,
                                      warning_what_to_expect,
                                      warning_further_details,
                                      warning_update_description,
                                      warning_area)
        values (#{id},
                #{weatherType},
                #{warningLevel},
                #{warningHeadLine},
                #{validFrom},
                #{validTo},
                #{warningImpact},
                #{warningLikelihood},
                #{affectedAreas},
                #{whatToExpect},
                #{warningFurtherDetails},
                #{warningUpdateDescription},
                ST_Multi(ST_GeomFromGeoJSON(#{areaAsJson})));
    </insert>

    <update id="updateWarning">
        update weather_warnings
        <set>
            <if test="weatherType != null and weatherType != ''">warning_weather_type = #{weatherType},</if>
            <if test="warningLevel != null and warningLevel != ''">warning_level = #{warningLevel},</if>
            <if test="warningHeadLine != null and warningHeadLine != ''">warning_head_line = #{warningHeadLine},</if>
            <if test="validFrom != null">warning_valid_from = #{validFrom},</if>
            <if test="validTo != null">warning_valid_to = #{validTo},</if>
            <if test="warningImpact != null and warningImpact != ''">warning_impact = #{warningImpact},</if>
            <if test="warningLikelihood != null and warningLikelihood != ''">warning_likelihood = #{warningLikelihood},</if>
            <if test="affectedAreas != null and affectedAreas != ''">warning_affected_areas = #{affectedAreas},</if>
            <if test="whatToExpect != null and whatToExpect != ''">warning_what_to_expect = #{whatToExpect},</if>
            <if test="warningFurtherDetails != null and warningFurtherDetails != ''">warning_further_details = #{warningFurtherDetails},</if>
            <if test="warningUpdateDescription != null and warningUpdateDescription != ''">warning_update_description = #{warningUpdateDescription},</if>
            <if test="area != null and area != ''">warning_area = ST_Multi(ST_GeomFromGeoJSON(#{areaAsJson})),</if>
        </set>
        where warning_id = #{id};
    </update>

    <delete id="deleteWarningByIDs">
        delete from weather_warnings where warning_id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
</mapper>