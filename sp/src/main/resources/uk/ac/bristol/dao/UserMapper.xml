<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="uk.ac.bristol.dao.UserMapper">
    <select id="selectAllUsers" resultMap="ResultMaps.UserMap">
        select *
        from users
        <include refid="ResultMaps.orderAndPage"/>
    </select>

    <select id="selectAllUsersWithAssetHolder" resultMap="ResultMaps.UserWithAssetHolderMap">
        select *
        from users
            left join asset_holders
                on users.user_asset_holder_id = asset_holders.asset_holder_id
        <include refid="ResultMaps.orderAndPage"/>
    </select>

    <select id="selectAllUnauthorisedUsersWithAssetHolder" resultMap="ResultMaps.UserWithAssetHolderMap">
        select *
        from users
        left join asset_holders
        on users.user_asset_holder_id = asset_holders.asset_holder_id
        where user_is_admin = false
        <include refid="ResultMaps.orderAndPage"/>
    </select>

    <select id="selectAllUsersWithAccumulator" resultMap="ResultMaps.UserWithAssetHolderMap">
        select
        user_id,
        user_password,
        user_asset_holder_id,
        asset_holder_id,
        asset_holder_name,
        asset_holder_email,
        asset_holder_phone,
        asset_holder_address_id,
        asset_holder_contact_preferences_id,
        asset_holder_last_modified,
        ${function}(asset_id) as accumulation
        from users
        left join asset_holders
        on users.user_asset_holder_id = asset_holders.asset_holder_id
        left join assets on asset_holder_id = asset_owner_id
        group by
        user_id,
        user_password,
        user_asset_holder_id,
        asset_holder_id,
        asset_holder_name,
        asset_holder_email,
        asset_holder_phone,
        asset_holder_address_id,
        asset_holder_contact_preferences_id,
        asset_holder_last_modified
        <include refid="ResultMaps.orderAndPage"/>
    </select>

    <select id="selectUserById" resultMap="ResultMaps.UserMap">
        select *
        from users
        where user_id = #{id};
    </select>

    <select id="loginQuery" resultMap="ResultMaps.UserMap">
        select *
        from users
        where user_id = #{id}
          and user_password = #{password};
    </select>

    <select id="selectUserByAssetHolderId" resultMap="ResultMaps.UserMap">
        select *
        from users
        where user_asset_holder_id = #{assetHolderId};
    </select>

    <select id="selectUserByAdmin" resultMap="ResultMaps.UserMap">
        select *
        from users
        where user_is_admin = #{isAdmin}
        <include refid="ResultMaps.orderAndPage"/>
    </select>

    <insert id="insertUser">
        insert into users (user_id, user_password, user_asset_holder_id, user_is_admin)
        values (#{id}, #{password}, #{assetHolderId}, #{admin});
    </insert>

    <update id="updateUserByUserId">
        update users
        <set>
            <if test="assetHolderId != null and assetHolderId != ''">user_asset_holder_id = #{assetHolderId},</if>
            <if test="password != null and password != ''">user_password = #{password},</if>
            <if test="admin != null">user_is_admin = #{admin},</if>
        </set>
        where user_id = #{id};
    </update>

    <delete id="deleteUserByAssetHolderIDs">
        delete from users where user_asset_holder_id in
        <foreach collection="ids" item="id" separator="," open="(" close=")">#{id}</foreach>
    </delete>

    <delete id="deleteUserByIds">
        delete from users where user_id in
        <foreach collection="ids" item="id" separator="," open="(" close=")">#{id}</foreach>
    </delete>
</mapper>