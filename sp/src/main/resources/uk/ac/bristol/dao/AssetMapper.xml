<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="uk.ac.bristol.dao.AssetMapper">
    <select id="selectAllAssets" resultMap="ResultMaps.AssetMap">
        select asset_id,
               asset_name,
               asset_type_id,
               asset_owner_id,
               ST_AsGeoJSON(asset_location) as asset_location,
               asset_capacity_litres,
               asset_material,
               asset_status,
               asset_installed_at,
               asset_last_inspection,
               asset_last_modified
        from assets
        <include refid="ResultMaps.filtering"/>
        <include refid="ResultMaps.orderAndPage"/>
    </select>

    <select id="selectAllAssetsWithWarnings" resultMap="ResultMaps.AssetWithWarningsMap">
        select a.asset_id,
               a.asset_name,
               a.asset_type_id,
               a.asset_owner_id,
               ST_AsGeoJSON(a.asset_location) as asset_location,
               a.asset_capacity_litres,
               a.asset_material,
               a.asset_status,
               a.asset_installed_at,
               a.asset_last_inspection,
               a.asset_last_modified,

               w.warning_id,
               w.warning_weather_type,
               w.warning_level,
               w.warning_head_line,
               w.warning_valid_from,
               w.warning_valid_to,
               w.warning_impact,
               w.warning_likelihood,
               w.warning_affected_areas,
               w.warning_what_to_expect,
               w.warning_further_details,
               w.warning_update_description,
               ST_AsGeoJSON(w.warning_area)   as warning_area
        from assets a

        <include refid="ResultMaps.filtering"/>
        <include refid="ResultMaps.orderAndPage"/>
    </select>

    <select id="selectAssetByID" resultMap="ResultMaps.AssetMap">
        select asset_id,
               asset_name,
               asset_type_id,
               asset_owner_id,
               ST_AsGeoJSON(asset_location) as asset_location,
               asset_capacity_litres,
               asset_material,
               asset_status,
               asset_installed_at,
               asset_last_inspection,
               asset_last_modified
        from assets
        where asset_id = #{id};
    </select>

    <select id="selectAssetWithWarningsByID" resultMap="ResultMaps.AssetWithWarningsMap">
        select a.asset_id,
               a.asset_name,
               a.asset_type_id,
               a.asset_owner_id,
               ST_AsGeoJSON(a.asset_location) as asset_location,
               a.asset_capacity_litres,
               a.asset_material,
               a.asset_status,
               a.asset_installed_at,
               a.asset_last_inspection,
               a.asset_last_modified,

               w.warning_id,
               w.warning_weather_type,
               w.warning_level,
               w.warning_head_line,
               w.warning_valid_from,
               w.warning_valid_to,
               w.warning_impact,
               w.warning_likelihood,
               w.warning_affected_areas,
               w.warning_what_to_expect,
               w.warning_further_details,
               w.warning_update_description,
               ST_AsGeoJSON(w.warning_area)   as warning_area
        from assets a
                 left join weather_warnings w
                           on ST_Intersects(a.asset_location, w.warning_area) and
                              now() between w.warning_valid_from and w.warning_valid_to
        where asset_id = #{id};
    </select>

    <select id="selectByAsset" resultMap="ResultMaps.AssetMap">
        select asset_id,
               asset_name,
               asset_type_id,
               asset_owner_id,
               ST_AsGeoJSON(asset_location) as asset_location,
               asset_capacity_litres,
               asset_material,
               asset_status,
               asset_installed_at,
               asset_last_inspection,
               asset_last_modified
        from assets
        <where>
            <if test="id != null and id != ''">and asset_id = #{id}</if>
            <if test="name != null and name != ''">and asset_name like #{name}</if>
            <if test="typeId != null and typeId != ''">and asset_type_id = #{typeId}</if>
            <if test="ownerId != null and ownerId != ''">and asset_owner_id = #{ownerId}</if>
            <if test="material != null and material != ''">and asset_material = #{material}</if>
            <if test="status != null and status != ''">and asset_status = #{status}</if>
        </where>
        <include refid="ResultMaps.orderAndPage"/>
    </select>

    <select id="selectByAssetWithWarnings" resultMap="ResultMaps.AssetWithWarningsMap">
        select a.asset_id,
        a.asset_name,
        a.asset_type_id,
        a.asset_owner_id,
        ST_AsGeoJSON(a.asset_location) as asset_location,
        a.asset_capacity_litres,
        a.asset_material,
        a.asset_status,
        a.asset_installed_at,
        a.asset_last_inspection,
        a.asset_last_modified,

        w.warning_id,
        w.warning_weather_type,
        w.warning_level,
        w.warning_head_line,
        w.warning_valid_from,
        w.warning_valid_to,
        w.warning_impact,
        w.warning_likelihood,
        w.warning_affected_areas,
        w.warning_what_to_expect,
        w.warning_further_details,
        w.warning_update_description,
        ST_AsGeoJSON(w.warning_area) as warning_area
        from assets a
        left join weather_warnings w
        on ST_Intersects(a.asset_location, w.warning_area) and
        now() between w.warning_valid_from and w.warning_valid_to
        <where>
            <if test="id != null and id != ''">and asset_id = #{id}</if>
            <if test="name != null and name != ''">and asset_name like #{name}</if>
            <if test="typeId != null and typeId != ''">and asset_type_id = #{typeId}</if>
            <if test="ownerId != null and ownerId != ''">and asset_owner_id = #{ownerId}</if>
            <if test="material != null and material != ''">and asset_material = #{material}</if>
            <if test="status != null and status != ''">and asset_status = #{status}</if>
        </where>
        <include refid="ResultMaps.orderAndPage"/>
    </select>

    <select id="selectAllAssetsOfHolder" resultMap="ResultMaps.AssetMap">
        select asset_id,
               asset_name,
               asset_type_id,
               asset_owner_id,
               ST_AsGeoJSON(asset_location) as asset_location,
               asset_capacity_litres,
               asset_material,
               asset_status,
               asset_installed_at,
               asset_last_inspection,
               asset_last_modified
        from assets
        where asset_owner_id = #{ownerId}
        <include refid="ResultMaps.orderAndPage"/>
    </select>

    <select id="selectAllAssetsWithWarningsOfHolder" resultMap="ResultMaps.AssetWithWarningsMap">
        select a.asset_id,
               a.asset_name,
               a.asset_type_id,
               a.asset_owner_id,
               ST_AsGeoJSON(a.asset_location) as asset_location,
               a.asset_capacity_litres,
               a.asset_material,
               a.asset_status,
               a.asset_installed_at,
               a.asset_last_inspection,
               a.asset_last_modified,

               w.warning_id,
               w.warning_weather_type,
               w.warning_level,
               w.warning_head_line,
               w.warning_valid_from,
               w.warning_valid_to,
               w.warning_impact,
               w.warning_likelihood,
               w.warning_affected_areas,
               w.warning_what_to_expect,
               w.warning_further_details,
               w.warning_update_description,
               ST_AsGeoJSON(w.warning_area)   as warning_area
        from assets a
                 left join weather_warnings w
                           on ST_Intersects(a.asset_location, w.warning_area) and
                              now() between w.warning_valid_from and w.warning_valid_to
        where asset_owner_id = #{ownerId}
        <include refid="ResultMaps.orderAndPage"/>
    </select>

    <select id="selectAllAssetTypes" resultMap="ResultMaps.AssetTypeMap">
        select * from asset_types
        <include refid="ResultMaps.filtering"/>
        <include refid="ResultMaps.orderAndPage"/>
    </select>

    <insert id="insertAssetType">
        insert into asset_types (asset_type_id,
                                 asset_type_name,
                                 asset_type_description)
        values (#{id}, #{name}, #{description});
    </insert>

    <insert id="insertAssetTypeAutoId">
        insert into asset_types (asset_type_name, asset_type_description)
        values (#{name}, #{description});
    </insert>

    <insert id="insertAsset">
        insert into assets
        (asset_id,
         asset_name,
         asset_type_id,
         asset_owner_id,
         asset_location,
         asset_capacity_litres,
         asset_material,
         asset_status,
         asset_installed_at,
         asset_last_inspection,
         asset_last_modified)
        values (#{id}, #{name}, #{typeId}, #{ownerId}, ST_Multi(ST_MakeValid(ST_GeomFromGeoJSON(#{locationAsJson}))),
                #{capacityLitres}, #{material}, #{status},
                #{installedAt}, #{lastInspection}, #{lastModified});
    </insert>

    <insert id="insertAssetAutoId">
        insert into assets
        (asset_name,
         asset_type_id,
         asset_owner_id,
         asset_location,
         asset_capacity_litres,
         asset_material,
         asset_status,
         asset_installed_at,
         asset_last_inspection,
         asset_last_modified)
        values (#{name}, #{typeId}, #{ownerId}, ST_Multi(ST_MakeValid(ST_GeomFromGeoJSON(#{locationAsJson}))),
                #{capacityLitres}, #{material}, #{status},
                #{installedAt}, #{lastInspection}, #{lastModified});
    </insert>

    <update id="updateAssetType">
        update asset_types
        <set>
            <if test="name != null and name != ''">asset_type_name = #{name},</if>
            <if test="description != null and description != ''">asset_type_description = #{description},</if>
        </set>
        where asset_type_id = #{id};
    </update>

    <update id="updateAsset">
        update assets
        <set>
            <if test="name != null and name != ''">asset_name = #{name},</if>
            <if test="typeId != null and typeId != ''">asset_type_id = #{typeId},</if>
            <if test="ownerId != null and ownerId != ''">asset_owner_id = #{ownerId},</if>
            <if test="location != null">asset_location = ST_Multi(ST_GeomFromGeoJSON(#{locationAsJson})),</if>
            <if test="capacityLitres != null and capacityLitres != ''">asset_capacity_litres = #{capacityLitres},</if>
            <if test="material != null and material != ''">asset_material = #{material},</if>
            <if test="status != null and status != ''">asset_status = #{status},</if>
            <if test="installedAt != null">asset_installed_at = #{installedAt},</if>
            <if test="lastInspection != null">asset_last_inspection = #{lastInspection},</if>
            <if test="lastModified != null">asset_last_modified = #{lastModified},</if>
        </set>
        where asset_id = #{id};
    </update>

    <delete id="deleteAssetTypeByIDs">
        delete from asset_types where asset_type_id in
        <foreach collection="ids" item="id" separator="," open="(" close=")">#{id}</foreach>
    </delete>

    <delete id="deleteAssetByIDs">
        delete from assets where asset_id in
        <foreach collection="ids" item="id" separator="," open="(" close=")">#{id}</foreach>
    </delete>

    <select id="selectAssetTypeByID" resultType="String">
        select asset_type_id from assets where asset_id = #{id}
    </select>

    <select id="selectAssetOwnerIdByAssetId" resultType="String">
        select asset_owner_id from assets where asset_id = #{id}
    </select>

    <select id="selectAssetIdsWithWarningId" resultType="java.lang.String">
        select a.asset_id
        from assets a
                        join weather_warnings w
                           on ST_Intersects(a.asset_location, w.warning_area) and
                              now() between w.warning_valid_from and w.warning_valid_to
                           where warning_id = #{id};
    </select>

    <select id="selectLatestAssetId" resultType="String">
        select asset_id from assets order by asset_row_id desc limit 1;
    </select>
</mapper>