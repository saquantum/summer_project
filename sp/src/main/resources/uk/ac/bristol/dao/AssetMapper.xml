<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="uk.ac.bristol.dao.AssetMapper">
    <select id="selectAssets" resultMap="ResultMaps.AssetMap">
        select asset_id,
               asset_name,
               asset_type_id,
               asset_owner_id,
               ST_AsGeoJSON(asset_location) as asset_location,
               asset_capacity_litres,
               asset_material,
               asset_status,
               asset_installed_at,
               asset_last_inspection,
               asset_last_modified
        from assets
        <include refid="ResultMaps.filtering"/>
        <include refid="ResultMaps.orderAndPage"/>
    </select>

    <select id="selectAssetsWithWarnings" resultMap="ResultMaps.AssetWithWarningsMap">
        select asset_id,
               asset_name,
               asset_type_id,
               asset_owner_id,
               ST_AsGeoJSON(asset_location) as asset_location,
               asset_capacity_litres,
               asset_material,
               asset_status,
               asset_installed_at,
               asset_last_inspection,
               asset_last_modified,

               warning_id,
               warning_weather_type,
               warning_level,
               warning_head_line,
               warning_valid_from,
               warning_valid_to,
               warning_impact,
               warning_likelihood,
               warning_affected_areas,
               warning_what_to_expect,
               warning_further_details,
               warning_update_description,
               ST_AsGeoJSON(warning_area)   as warning_area
        from assets
                 left join weather_warnings
                           on ST_Intersects(asset_location, warning_area) and
                              now() between warning_valid_from and warning_valid_to

        <include refid="ResultMaps.filtering"/>
        <include refid="ResultMaps.orderAndPage"/>
    </select>

    <select id="selectAssetsWithWarningsPuttingWarningsTableMain" resultMap="ResultMaps.AssetWithWarningsMap">
        select asset_id,
               asset_name,
               asset_type_id,
               asset_owner_id,
               ST_AsGeoJSON(asset_location) as asset_location,
               asset_capacity_litres,
               asset_material,
               asset_status,
               asset_installed_at,
               asset_last_inspection,
               asset_last_modified,

               warning_id,
               warning_weather_type,
               warning_level,
               warning_head_line,
               warning_valid_from,
               warning_valid_to,
               warning_impact,
               warning_likelihood,
               warning_affected_areas,
               warning_what_to_expect,
               warning_further_details,
               warning_update_description,
               ST_AsGeoJSON(warning_area)   as warning_area
        from weather_warnings
                 left join assets
                           on ST_Intersects(asset_location, warning_area) and
                              now() between warning_valid_from and warning_valid_to

        <include refid="ResultMaps.filtering"/>
        <include refid="ResultMaps.orderAndPage"/>
    </select>

    <select id="selectAssetTypes" resultMap="ResultMaps.AssetTypeMap">
        select *
        from asset_types
        <include refid="ResultMaps.filtering"/>
        <include refid="ResultMaps.orderAndPage"/>
    </select>

    <insert id="insertAssetType">
        insert into asset_types (asset_type_id,
                                 asset_type_name,
                                 asset_type_description)
        values (#{id}, #{name}, #{description});
    </insert>

    <insert id="insertAssetTypeAutoId">
        insert into asset_types (asset_type_name, asset_type_description)
        values (#{name}, #{description});
    </insert>

    <insert id="insertAsset">
        insert into assets (asset_id,
                            asset_name,
                            asset_type_id,
                            asset_owner_id,
                            asset_location,
                            asset_capacity_litres,
                            asset_material,
                            asset_status,
                            asset_installed_at,
                            asset_last_inspection,
                            asset_last_modified)
        values (#{id}, #{name}, #{typeId}, #{ownerId}, ST_Multi(ST_MakeValid(ST_GeomFromGeoJSON(#{locationAsJson}))),
                #{capacityLitres}, #{material}, #{status},
                #{installedAt}, #{lastInspection}, #{lastModified});
    </insert>

    <select id="insertAssetReturningId" parameterType="uk.ac.bristol.pojo.Asset" resultType="java.lang.String">
        insert into assets (asset_id,
                            asset_name,
                            asset_type_id,
                            asset_owner_id,
                            asset_location,
                            asset_capacity_litres,
                            asset_material,
                            asset_status,
                            asset_installed_at,
                            asset_last_inspection,
                            asset_last_modified)
        values (#{id}, #{name}, #{typeId}, #{ownerId}, ST_Multi(ST_MakeValid(ST_GeomFromGeoJSON(#{locationAsJson}))),
                #{capacityLitres}, #{material}, #{status},
                #{installedAt}, #{lastInspection}, #{lastModified})
        returning asset_id;
    </select>

    <insert id="insertAssetAutoId">
        insert into assets (asset_name,
                            asset_type_id,
                            asset_owner_id,
                            asset_location,
                            asset_capacity_litres,
                            asset_material,
                            asset_status,
                            asset_installed_at,
                            asset_last_inspection,
                            asset_last_modified)
        values (#{name}, #{typeId}, #{ownerId}, ST_Multi(ST_MakeValid(ST_GeomFromGeoJSON(#{locationAsJson}))),
                #{capacityLitres}, #{material}, #{status},
                #{installedAt}, #{lastInspection}, #{lastModified});
    </insert>

    <update id="updateAssetType">
        update asset_types
        <set>
            <if test="name != null and name != ''">asset_type_name = #{name},</if>
            <if test="description != null and description != ''">asset_type_description = #{description},</if>
        </set>
        where asset_type_id = #{id};
    </update>

    <update id="updateAsset">
        update assets
        <set>
            <if test="name != null and name != ''">asset_name = #{name},</if>
            <if test="typeId != null and typeId != ''">asset_type_id = #{typeId},</if>
            <if test="ownerId != null and ownerId != ''">asset_owner_id = #{ownerId},</if>
            <if test="location != null">asset_location = ST_Multi(ST_GeomFromGeoJSON(#{locationAsJson})),</if>
            <if test="capacityLitres != null and capacityLitres != ''">asset_capacity_litres = #{capacityLitres},</if>
            <if test="material != null and material != ''">asset_material = #{material},</if>
            <if test="status != null and status != ''">asset_status = #{status},</if>
            <if test="installedAt != null">asset_installed_at = #{installedAt},</if>
            <if test="lastInspection != null">asset_last_inspection = #{lastInspection},</if>
            <if test="lastModified != null">asset_last_modified = #{lastModified},</if>
        </set>
        where asset_id = #{id};
    </update>

    <delete id="deleteAssetTypeByIDs">
        delete
        from asset_types
        where asset_type_id in
        <foreach collection="ids" item="id" separator="," open="(" close=")">#{id}</foreach>
    </delete>

    <delete id="deleteAssetByIDs">
        delete
        from assets
        where asset_id in
        <foreach collection="ids" item="id" separator="," open="(" close=")">#{id}</foreach>
    </delete>
</mapper>