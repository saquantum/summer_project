<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="uk.ac.bristol.dao.Settings">
    <update id="resetSchema">
        create extension if not exists postgis;
        drop table if exists table_meta_data cascade;
        drop table if exists asset_holders cascade;
        drop table if exists address cascade;
        drop table if exists contact_preferences cascade;
        drop table if exists users cascade;
        drop table if exists asset_types cascade;
        drop table if exists assets cascade;
        drop table if exists weather_warnings cascade;
        drop table if exists templates cascade;
        drop table if exists permission_config cascade;
    </update>

    <update id="createTableMetaData">
        create table if not exists table_meta_data
        (
            table_name  varchar(100) primary key,
            total_count bigint not null
        );
    </update>

    <sql id="initTableMetaData">
        insert into table_meta_data (table_name, total_count)
        values (#{tableName}, 0)
        on conflict (table_name) do nothing;
    </sql>

    <select id="selectAllMetaData" resultMap="ResultMaps.MetaDataMap">
        select *
        from table_meta_data;
    </select>

    <select id="selectMetaDataByTableName" resultMap="ResultMaps.MetaDataMap">
        select *
        from table_meta_data
        where table_name = #{tableName};
    </select>

    <update id="increaseTotalCountByTableName">
        update table_meta_data
        <set>
            <if test="totalCount != null">
                total_count = total_count + #{totalCount},
            </if>
        </set>
        where table_name = #{tableName};
    </update>

    <update id="createAssetHolders">
        create table if not exists asset_holders
        (
            asset_holder_row_id                 bigserial primary key,
            asset_holder_id                     varchar(50) unique not null,
            asset_holder_name                   varchar(200)       not null,
            asset_holder_email                  varchar(50)        not null,
            asset_holder_phone                  varchar(50)        not null,
            asset_holder_address_id             varchar(50) unique not null,
            asset_holder_contact_preferences_id varchar(50) unique not null,
            asset_holder_last_modified          timestamptz default current_timestamp
        );

        create or replace function set_asset_holder_id()
            returns trigger as
        $$
        begin
            if NEW.asset_holder_id is null or NEW.asset_holder_id = '' then
                NEW.asset_holder_id := '$user_' || lpad(NEW.asset_holder_row_id::text, 3, '0');
            end if;
            return NEW;
        end;
        $$ language plpgsql;

        drop trigger if exists asset_holder_id_trigger on asset_holders;
        create trigger asset_holder_id_trigger
            before insert
            on asset_holders
            for each row
        execute function set_asset_holder_id();

        <include refid="initTableMetaData"/>
    </update>

    <update id="createAddress">
        create table if not exists address
        (
            address_id       varchar(50) primary key references asset_holders (asset_holder_address_id) on update cascade,
            address_street   varchar(100),
            address_city     varchar(100),
            address_postcode varchar(50),
            address_country  varchar(100)
        );

        <include refid="initTableMetaData"/>
    </update>

    <update id="createContactPreferences">
        create table if not exists contact_preferences
        (
            contact_preferences_id       varchar(50) primary key references asset_holders (asset_holder_contact_preferences_id) on update cascade,
            contact_preferences_email    boolean default false,
            contact_preferences_phone    boolean default false,
            contact_preferences_post     boolean default false,
            contact_preferences_whatsapp boolean default false,
            contact_preferences_discord  boolean default false,
            contact_preferences_telegram boolean default false
        );

        <include refid="initTableMetaData"/>
    </update>

    <update id="createUsers">
        create table if not exists users
        (
            user_id              varchar(100) primary key,
            user_asset_holder_id varchar(50),
            user_password        varchar(100) not null,
            user_is_admin        boolean      not null
        );

        <include refid="initTableMetaData"/>
    </update>

    <update id="createAssetTypes">
        create table if not exists asset_types
        (
            asset_type_row_id      bigserial primary key,
            asset_type_id          varchar(50) unique not null,
            asset_type_name        varchar(100)       not null,
            asset_type_description varchar(1000)
        );

        create or replace function set_asset_type_id()
            returns trigger as
        $$
        begin
            if NEW.asset_type_id is null or NEW.asset_type_id = '' then
                NEW.asset_type_id := 'type_' || lpad(NEW.asset_type_row_id::text, 3, '0');
            end if;
            return NEW;
        end;
        $$ language plpgsql;

        drop trigger if exists asset_type_id_trigger on asset_types;
        create trigger asset_type_id_trigger
            before insert
            on asset_types
            for each row
        execute function set_asset_type_id();

        <include refid="initTableMetaData"/>
    </update>

    <update id="createAssets">
        create table if not exists assets
        (
            asset_row_id          bigserial primary key,
            asset_id              varchar(50) unique           not null,
            asset_name            varchar(100)                 not null,
            asset_type_id         varchar(50) references asset_types (asset_type_id) on update cascade,
            asset_owner_id        varchar(50) references asset_holders (asset_holder_id) on update cascade on delete cascade,
            asset_location        geometry(multipolygon, 4326) not null,
            asset_capacity_litres int,
            asset_material        varchar(50),
            asset_status          varchar(50),
            asset_installed_at    date,
            asset_last_inspection date,
            asset_last_modified   timestamptz default current_timestamp
        );

        create or replace function set_asset_id()
            returns trigger as
        $$
        begin
            if NEW.asset_id is null or NEW.asset_id = '' then
                NEW.asset_id := 'asset_' || lpad(NEW.asset_row_id::text, 3, '0');
            end if;
            return NEW;
        end;
        $$ language plpgsql;

        drop trigger if exists asset_id_trigger on assets;
        create trigger asset_id_trigger
            before insert
            on assets
            for each row
        execute function set_asset_id();

        <include refid="initTableMetaData"/>
    </update>

    <update id="createWeatherWarnings">
        create table if not exists weather_warnings
        (
            warning_id                 bigint primary key,
            warning_weather_type       varchar,
            warning_level              varchar,
            warning_head_line          text,
            warning_valid_from         timestamptz,
            warning_valid_to           timestamptz,
            warning_impact             varchar,
            warning_likelihood         varchar,
            warning_affected_areas     text,
            warning_what_to_expect     text,
            warning_further_details    text,
            warning_update_description text,
            warning_area               geometry(multipolygon, 4326)
        );

        <include refid="initTableMetaData"/>
    </update>

    <update id="createNotificationTemplates">
        create table if not exists templates
        (
            template_id                   bigserial primary key,
            template_asset_type_id        varchar(50),
            template_weather_warning_type varchar(50),
            template_severity             varchar(50),
            template_contact_channel      varchar(50),
            template_title                text,
            template_body                 text,
            constraint joint_unique_identifier unique (template_asset_type_id,
                                                       template_weather_warning_type,
                                                       template_severity,
                                                       template_contact_channel)
        );

        <include refid="initTableMetaData"/>
    </update>

    <update id="createPermissionConfig">
        CREATE TABLE permission_config (
                                           user_id BIGINT PRIMARY KEY,
                                           can_create_asset BOOLEAN DEFAULT FALSE,
                                           can_set_polygon_on_create BOOLEAN DEFAULT FALSE,
                                           can_update_asset_fields BOOLEAN DEFAULT FALSE,
                                           can_update_polygon BOOLEAN DEFAULT FALSE,
                                           can_delete_own_asset BOOLEAN DEFAULT FALSE,
                                           can_update_self_profile BOOLEAN DEFAULT FALSE,
                                           CONSTRAINT fk_user FOREIGN KEY (user_id) REFERENCES users(id)
                                               DEFERRABLE INITIALLY DEFERRED
        );

        INSERT INTO permission_config (user_id) VALUES (NULL);
    </update>

</mapper>